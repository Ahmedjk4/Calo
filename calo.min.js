// Init
const calo = {
    cc: cc,
    ccold: ccold,
    rand: rand,
    random: random,
    time: time,
    volume: volume,
    power: power,
    convert: convert
}
// ----------------------------------------------------------------------------
//Configs
const Powers =  {
    "W": 1,
    "EW": 0.000000000000000001,
    "PW": 0.000000000000001,
    "TW": 0.000000000001,
    "GW": 0.000000001,
    "MW": 0.000001,
    "kW": 0.001,
    "hW": 0.01,
    "daW": 0.1,
    "dW": 10,
    "cW": 100,
    "mW": 1000,
    "µW": 1000000,
    "nW": 1000000000,
    "pW": 1000000000000,
    "fW": 1000000000000000,
    "aW": 1000000000000000000,
    "hp": 0.0013410221,
    "550 ft*lbf/s": 0.0013410221,
    "ft*lbf/s": 0.0013410221,
    "horsepower": 0.0013410221,
    "horsepower metric": 0.0013596216,
    "horsepower boiler": 0.000101942,
    "horsepower electric": 0.0013404826,
    "horsepower water": 0.0013404053,
    "ps": 0.0013596216,
    "pferdestarke": 0.0013596216,
    "Btu (IT)/hour": 3.4121416331,
    "Btu (IT)/minute": 0.0568690272,
    "Btu (IT)/second": 0.0009478171,
    "Btu (th)/hour": 3.4144259497,
    "Btu (th)/minute": 0.0569070992,
    "Btu (th)/second": 0.0009484517,
    "MBtu (IT)/hour": 0.0000034121,
    "MBH": 0.0034121416,
    "ton (refrigeration)": 0.0002843451,
    "kilocalorie (IT)/hour": 0.8598452279,
    "kcal/h": 0.8598452279,
    "kilocalorie (IT)/minute": 0.0143307538,
    "kcal/m": 0.0143307538,
    "kilocalorie (IT)/second": 0.0002388459,
    "kcal/s": 0.0002388459,
    "kilocalorie (th)/hour": 0.8604206501,
    "kilocalorie (th)/minute": 0.0143403442,
    "kilocalorie (th)/second": 0.0002390057,
    "calorie (IT)/hour": 859.84522786,
    "cal/h": 859.84522786,
    "calorie (IT)/minute": 14.330753798,
    "cal/m": 14.330753798,
    "calorie (IT)/second": 0.2388458966,
    "calorie (th)/hour": 860.4206501,
    "calorie (th)/minute": 14.340344168,
    "calorie (th)/second": 0.2390057361,
    "foot pound-force/hour": 2655.2237374,
    "foot pound-force/minute": 44.253728957,
    "foot pound-force/second": 0.7375621493,
    "pound-foot/hour": 2655.2237374,
    "lbf*ft/h": 2655.2237374,
    "pound-foot/minute": 44.253728957,
    "pound-foot/second": 0.7375621493,
    "erg/second": 10000000,
    "erg/s": 10000000,
    "kilovolt ampere": 0.001,
    "kV*A": 0.001,
    "volt ampere": 1,
    "V*A": 1,
    "newton meter/second": 1,
    "NM/s": 1,
    "joule/second": 1,
    "J/s": 1,
    "exajoule/second": 0.000000000000000001,
    "EJ/s": 0.000000000000000001,
    "petajoule/second": 0.000000000000001,
    "PJ/s": 0.000000000000001,
    "terajoule/second": 0.000000000001,
    "TJ/s": 0.000000000001,
    "gigajoule/second": 0.000000001,
    "GJ/s": 0.000000001,
    "megajoule/second": 0.000001,
    "MJ/s": 0.000001,
    "kilojoule/second": 0.001,
    "kJ/s": 0.001,
    "hectojoule/second": 0.01,
    "hJ/s": 0.01,
    "dekajoule/second": 0.1,
    "daJ/s": 0.1,
    "decijoule/second": 10,
    "dJ/s": 10,
    "centijoule/second": 100,
    "cJ/s": 100,
    "millijoule/second": 1000,
    "mJ/s": 1000,
    "microjoule/second": 1000000,
    "µJ/s": 1000000,
    "nanojoule/second": 1000000000,
    "nJ/s": 1000000000,
    "picojoule/second": 1000000000000,
    "pJ/s": 1000000000000,
    "femtojoule/second": 1000000000000000,
    "fJ/s": 1000000000000000,
    "attojoule/second":  1000000000000000000,
    "aJ/s": 1000000000000000000,
    "joule/hour": 3600,
    "J/h": 3600,
    "joule/minute": 60,
    "J/min": 60,
    "kilojoule/hour": 3.6,
    "kJ/h": 3.6,
    "kilojoule/minute": 0.06,
    "kJ/min": 0.06
}
const volumes = {
    "milliLiter": 1,
    "mL": 1,
    "bbl (oil)": 0.0000062898107280219,
    "bblUK": 0.0000061102568971969,
    "bblUS": 0.0000085216794934986,
    "Board Feet": 0.000423776000658,
    "Bushels (UK)": 0.000027496156037386,
    "Bushels (US)": 0.000028377593256211,
    "centiLitter": 0.1,
    "cL": 0.1,
    "Cubic Centimeters": 1,
    "cm3": 1,
    "Cubic Decimeter": 0.01,
    "dm3": 0.01,
    "kiloLiter": 0.0000010,
    "kL": 0.0000010,
    "Liter": 0.001,
    "L": 0.001,
    "l": 0.001,
    "hL": 0.000010,
    "Hectoliters": 0.000010
}
const rates = {"AED":3.6721,"AFN":87.700535,"ALL":101.421457,"AMD":386.763455,"ANG":1.796609,"AOA":510,"ARS":228.263362,"AUD":1.503534,"AWG":1.8,"AZN":1.7,"BAM":1.787833,"BBD":2,"BDT":107.052453,"BGN":1.787833,"BHD":0.376952,"BIF":2082.284762,"BMD":1,"BND":1.329951,"BOB":6.888798,"BRL":4.9217,"BSD":1,"BTC":0.000037169664,"BTN":81.933361,"BWP":13.49807,"BYN":2.516294,"BZD":2.009415,"CAD":1.36585,"CDF":2045,"CHF":0.897869,"CLF":0.028476,"CLP":785.75,"CNH":6.95567,"CNY":6.9582,"COP":4583.20765,"CRC":533.479646,"CUC":1,"CUP":25.75,"CVE":100.79985,"CZK":21.751,"DJF":177.494372,"DKK":6.863,"DOP":54.417475,"DZD":136.144,"EGP":30.712213,"ERN":15,"ETB":54.392342,"EUR":0.914286,"FJD":2.2218,"FKP":0.8026,"GBP":0.8026,"GEL":2.575,"GGP":0.8026,"GHS":11.75,"GIP":0.8026,"GMD":59.85,"GNF":8650,"GTQ":7.775492,"GYD":210.841505,"HKD":7.84775,"HNL":24.498377,"HRK":6.94434,"HTG":145.052304,"HUF":341.495,"IDR":14844.45,"ILS":3.67375,"IMP":0.8026,"INR":82.200483,"IQD":1305.907746,"IRR":42250,"ISK":137.2092,"JEP":0.8026,"JMD":154.248409,"JOD":0.7094,"JPY":135.735,"KES":137,"KGS":87.3,"KHR":4104.412427,"KMF":451.149989,"KPW":900,"KRW":1342.463371,"KWD":0.30695,"KYD":0.830842,"KZT":446.738724,"LAK":17469.983339,"LBP":14963.407543,"LKR":312.537138,"LRD":166.74998,"LSL":19.149412,"LYD":4.746103,"MAD":9.969834,"MDL":17.74487,"MGA":4381.360832,"MKD":56.323411,"MMK":2093.513894,"MNT":3519,"MOP":8.05247,"MRU":34.303213,"MUR":45.354264,"MVR":15.36,"MWK":1023.265418,"MXN":17.5977,"MYR":4.4625,"MZN":63.850001,"NAD":19.34,"NGN":462.5,"NIO":36.525,"NOK":10.661,"NPR":131.093753,"NZD":1.611604,"OMR":0.38498,"PAB":1,"PEN":3.648156,"PGK":3.524841,"PHP":55.863996,"PKR":284.363426,"PLN":4.165455,"PYG":7200.561945,"QAR":3.641,"RON":4.5437,"RSD":108.09,"RUB":77.33952,"RWF":1114.859019,"SAR":3.750303,"SBD":8.334311,"SCR":13.823301,"SDG":600,"SEK":10.3888,"SGD":1.3385,"SHP":0.8026,"SLL":17665,"SOS":566.753573,"SRD":37.1115,"SSP":130.26,"STD":22823.990504,"STN":22.395905,"SVC":8.722519,"SYP":2512.53,"SZL":19.158097,"THB":33.922995,"TJS":10.901046,"TMT":3.51,"TND":3.045,"TOP":2.348432,"TRY":19.5783,"TTD":6.766306,"TWD":30.8244,"TZS":2357,"UAH":36.816766,"UGX":3710.408977,"USD":1,"UYU":38.992809,"UZS":11429.269247,"VES":25.147676,"VND":23460.413462,"VUV":118.979,"WST":2.72551,"XAF":599.732126,"XAG":0.04171012,"XAU":0.00049725,"XCD":2.70255,"XDR":0.738882,"XOF":599.732126,"XPD":0.00066464,"XPF":109.103309,"XPT":0.00094841,"YER":250.350066,"ZAR":19.334999,"ZMW":18.267745,"ZWL":322}
// ----------------------------------------------------------------------------
/**
 * Example: cc("1 + 1")
 * @param {String} mathexp The Mathmatical Expression
 */
// ----------------------------------------------------------------------------
function cc(mathexp){
        var ans;
        try{
           ans = eval(mathexp.replace("x","*").replace("÷","/").replace("X","*"))
        } catch {
            throw new Error("Please Enter Valid Expression (x,*,-,+,-,%,÷)")
        }
        return ans;
}
// ----------------------------------------------------------------------------
/**
 * 
 * @param {Number} sum1 
 * @param {String} type 
 * @param {Number} sum2 
 */
async function ccold(sum1,type,sum2){
    const plus = sum1 + sum2
    const minus = sum1 - sum2
    const multiply = sum1 * sum2
    const divide = sum1 / sum2
        switch(type) {
            case '+':
                return plus;
                break;
            case '-':
                 return minus;
                break;
            case '/': 
                return divide;
                break;
            case '÷':
                return divide;
                break;
            case 'x':
                return multiply;
                break;
            case 'X':
                return multiply;
                break;
            case '*':
                return multiply;
                break;
            default:
                console.log('Type Must Be String And Be -,+,/,÷,x,X,*')
        }
    }
// ----------------------------------------------------------------------------
/**
 * Returns Random Number Between Minimum And Maximum
 * @param {Number} max The Maximum Output 
 * @param {Number} min The Minimum Output
 */
function rand(min,max) {
    const number = Math.floor(Math.random() * (max - min + 1)) + min;
    return number;
}
// ----------------------------------------------------------------------------
/**
 * Returns Random Number Between Minimum And Maximum
 * @param {Number} max The Maximum Output 
 * @param {Number} min The Minimum Output
 */
function random(min,max) {
    const number = Math.floor(Math.random() * (max - min + 1)) + min;
    return number;
}
// ----------------------------------------------------------------------------
/** 
*
*@param {Number} input
*@param {String} type
*@param {String} type2
*
*/
function time(type,type2,input) {
    if(type.toLowerCase() === "m" && type2.toLowerCase() === "h"){
        return input / 60;
    }
    if(type.toLowerCase() === "h" && type2.toLowerCase() === "m"){
        return input * 60;
    }
    if(type.toLowerCase() === "s" && type2.toLowerCase() === "m"){  
        return input / 60;
    }
    if(type.toLowerCase() === "m" && type2.toLowerCase() === "s"){
        return input * 60;
    }
    if(type.toLowerCase() === "s" && type2.toLowerCase() === "h"){
        return input / 3600;
    }
    if(type.toLowerCase() === "h" && type2.toLowerCase() === "s"){
        return input * 3600;
    }
}
// ----------------------------------------------------------------------------
/** 
*
* @param {String} from The Name Of The Volume Unit.
* @param {String} to The Name Of The Converted Volume Unit.
* @param {Number} value The Number To Be Converted.
* @description Example : calo.volume("L", "mL", 1) 
*/
function volume(from,to,value){
    if(from !== "mL" || from !== "milliLiter"){
        value = value / volumes[from]
    }
    return value * volumes[to];
}
// ----------------------------------------------------------------------------
/** 
*
* @param {String} from The Name Of The Initial Currency In ISO Code.
* @param {String} to The Name Of The Converted Currency In ISO Code.
* @param {Number} value The Number To Be Converted.
* @description Example : calo.convert("egp", "usd", 30) 
*/
function convert(from,to,value){
    from = from.toUpperCase();
    to = to.toUpperCase();
    if(from !== "USD"){
        value = value / rates[from]
    }
    return value * rates[to];
}
// ----------------------------------------------------------------------------
/** 
*
* @param {String} from The Name Of The Power Unit.
* @param {String} to The Name Of The Converted Power Unit.
* @param {Number} value The Number To Be Converted.
* @description Example : calo.power("W", "cW", 1) 
*/
function power(from,to,value){
    if(from !== "W"){
        value = value / Powers[from]
    }
    return value * Powers[to];
}
